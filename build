#!/usr/bin/env bash

set -E

lang_packs=(
    'archversion:prurigro/vim-archversion'
    'arduino:sudar/vim-arduino-syntax'
    'aspnet:vim-scripts/aspnet.vim--Abshire'
    'blade:xsbeats/vim-blade'
    'c++11:octol/vim-cpp-enhanced-highlight'
    'c-extensions:kergoth/aftersyntaxc.vim'
    'c/c++:vim-jp/cpp-vim'
    'clojure:guns/vim-clojure-static'
    'coffee-script:kchmck/vim-coffee-script'
    'coloresque:prurigro/vim-coloresque'
    'css:hail2u/vim-css3-syntax#main'
    'cucumber:tpope/vim-cucumber'
    'cython:tshirtman/vim-cython'
    'dockerfile:honza/dockerfile.vim'
    'elixir:elixir-lang/vim-elixir'
    'emberscript:heartsentwined/vim-ember-script'
    'emblem:heartsentwined/vim-emblem'
    'erlang:oscarh/vimerl'
    'git:tpope/vim-git'
    'go:fatih/vim-go:_basic'
    'handlebars:mustache/vim-mustache-handlebars'
    'haskell:travitch/hasksyn'
    'haxe:yaymukund/vim-haxe'
    'html5:othree/html5.vim'
    'jade:digitaltoad/vim-jade'
    'jasmine:glanotte/vim-jasmine'
    'javascript:pangloss/vim-javascript'
    'json:elzr/vim-json:_basic'
    'jst:briancollins/vim-jst'
    'jsx:MaxMEllon/vim-jsx-pretty'
    'latex:LaTeX-Box-Team/LaTeX-Box'
    'less:groenewege/vim-less'
    'liquid:tpope/vim-liquid'
    'markdown:plasticboy/vim-markdown:_basic'
    'nginx:mutewinter/nginx.vim'
    'nim:zah/nimrod.vim'
    'ocaml:jrk/vim-ocaml'
    'octave:vim-scripts/octave.vim--'
    'opencl:petRUShka/vim-opencl'
    'openhab:cyberkov/openhab-vim'
    'openscad:sirtaj/vim-openscad'
    'perl:vim-perl/vim-perl'
    'php:StanAngeloff/php.vim'
    'protobuf:uarun/vim-protobuf'
    'puppet:rodjek/vim-puppet'
    'python:mitsuhiko/vim-python-combined'
    'r-lang:jcfaria/Vim-R-plugin'
    'rspec:sheerun/rspec.vim'
    'ruby:vim-ruby/vim-ruby'
    'rust:wting/rust.vim'
    'sbt:derekwyatt/vim-sbt'
    'scala:derekwyatt/vim-scala'
    'scss:cakebaker/scss-syntax.vim'
    'slim:slim-template/vim-slim'
    'stylus:wavded/vim-stylus'
    'svg:vim-scripts/svg.vim'
    'swift:toyamarinyon/vim-swift'
    'systemd:kurayama/systemd-vim-syntax'
    'textile:timcharper/textile.vim'
    'tmux:tmux-plugins/vim-tmux'
    'tomdoc:duwanis/tomdoc.vim'
    'toml:cespare/vim-toml#main'
    'twig:beyondwords/vim-twig'
    'typescript:leafgarland/typescript-vim'
    'vala:tkztmk/vim-vala'
    'vbnet:vim-scripts/vbnet.vim'
    'vm:lepture/vim-velocity'
    'vue:posva/vim-vue'
    'xls:vim-scripts/XSLT-syntax'
    'yard:sheerun/vim-yardoc'
)

langdirs='after/ftdetect after/ftplugin after/indent after/syntax autoload compiler ftdetect ftplugin indent plugin syntax syntax_checkers'
langdirs_basic='after/ftdetect after/indent after/syntax ftdetect indent syntax'
tmpfolder='./tmp'
gitsource='https://github.com'

function cleanup_and_exit {
    # remove temp folder
    [[ -d "$tmpfolder" ]] && rm -rf ${tmpfolder:?}
    printf '%s\n' "$1"
    exit "$2"
}

function download {
    for pack in "${lang_packs[@]}"; do
        path="$(cut -d ':' -f 2 <<< "$pack" | cut -d '#' -f 1)"
        dir="$tmpfolder/$(cut -d '/' -f 2 <<< "$path")"

        if [[ "$pack" =~ \# ]]; then
            branch="$(cut -d '#' -f 2 <<< "$pack")"
        else
            branch='master'
        fi

        [[ -d "$dir" ]] && rm -rf "${dir:?}"

        while [[ ! -d "$dir" ]]; do
            git clone -b "$branch" -q --recursive "$gitsource/${path}.git" "$dir" && printf '%s' '.'
        done
    done

    wait
}

function extract {
    printf '\n'

    for pack in "${lang_packs[@]}"; do
        name="$(cut -d ':' -f 1 <<< "$pack" | cut -d '#' -f 1)"
        path="$(cut -d ':' -f 2 <<< "$pack" | cut -d '#' -f 1)"
        dir="$tmpfolder/$(cut -d '/' -f 2 <<< "$path")"
        directories="langdirs$(cut -d ':' -f 3 <<< "$pack" | cut -d '#' -f 1)"
        subdirs=''

        if grep -q '#' <<< "$pack"; then
            branch="$(cut -d '#' -f 2 <<< "$pack")"
        else
            branch='master'
        fi

        printf -- '%s' "- [$name]($gitsource/${path}#branch=$branch) ("

        for subdir in ${!directories}; do
            if [[ -d "$dir/$subdir" ]]; then
                base="$(basename "$subdir")"
                [[ "$subdirs" != *"$base"* ]] && subdirs="$subdirs, $base"
                copy_dir "$dir" "$subdir"
            fi
        done

        printf '%s\n' "${subdirs##, })"
    done
}

function copy_dir {
    while read -r; do
        file_path="$(dirname "${REPLY##$1/}")"
        install -d "$file_path"
        touch "$file_path/$(basename "$REPLY")"
        cat "$REPLY" >> "$file_path/$(basename "$REPLY")"
    done < <(find "$1/$2" -name '*.vim')
}

function concat_ftdetect {
    cat ftdetect/* | grep -e '^[^"]' > "$tmpfolder/polyglot.vim"
    rm -f ftdetect/*
    mv "$tmpfolder/polyglot.vim" ftdetect/
}

function cleanup {
    directories=(after autoload compiler ftdetect ftplugin indent plugin syntax)

    for dir in "${directories[@]}"; do
        if [[ -d "$dir" ]]; then
            rm -rf "${dir:?}"
        fi
    done
}

printf '%s\n' 'Removing existing folders...'
cleanup

printf '%s\n' 'Creating temporary folder...'
[[ -d "$tmpfolder" ]] && rm -rf "${tmpfolder:?}"
install -d "$tmpfolder"

printf '%s' 'Downloading packs'
download

printf '\n%s\n' 'Extracting packs...'
extract

printf '\n%s\n' 'Combining ftdetect...'
concat_ftdetect

printf '\n'
cleanup_and_exit 'Done!' 0
